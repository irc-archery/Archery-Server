Archery Server HTTP & WebSocket Event
2015 06 26

ログイン画面

ブラウザ側は /login, アプリ側は /app/login にHTTP通信のPOSTでemailとpasswordを送信。
認証が完了したら、サーバーはログイン状態を保持させるためのsessionIDをHTTPヘッダに送付したレスポンスを返す。

ログイン

HttpMethod : POST
RequestURI(for browser) : http://hostname/login
RequestURI(for app) : http://hostname/app/login
Data Format :
{
	'email':	string,
	'password':	string
}


アカウント作成画面

ブラウザ側は /createAccount , アプリ側は /app/createAccount にHTTP通信のPOSTでアカウント作成に必要な情報を送信。作成が正常に完了したらレスポンスにログイン状態を保持させるためのsessionIDを送付する。

アカウント作成

HttpMethod : POST
RequestURI(for browser) : http://hostname/createAccount
RequestURI(for app) : http://hostname/app/createAccount
Data Format :
{
	'firstName':	string,	// 名
	'lastName':		string,	// 姓
	'rubyFirstName':string,	// ふりがな - 名
	'rubyLastName':	string,	// ふりがな - 姓
	'email':		string,	// ログイン用のEmail
	'password':		string,	// ログイン用のpassword (パスワードの再入力は各クライアント毎に実装する)
	'birth':		string,	// 生年月日 format : 1997-08-06
	'sex':			int 	// 男性 : 0, 女性 : 1, その他 : 8, 未設定 : 9
}


試合一覧画面

/matchIndexにwebsocketで接続。
試合一覧データを取得するイベント  extractMatchIndexでsessionIDを送信すると、そのユーザーが参加できる試合一覧のデータが同じイベント名で返ってくる。
また、接続中に試合が作成された場合は、 broadcastInsertMatchのイベント名でデータを受け取る。
試合に参加したい場合は次のページ(アクティビティ)の /scoreCardIndex で イベント joinMatch をsessionIDとその試合のID(m_id)とともにEmitすることでその試合に参加したことになり得点表一覧データが送られてくる。

length
0 : 90m
1 : 70m
2 : 60m
3 : 50m
4 : 40m
5 : 30m
6 : 70m前
7 : 70m後

試合::一覧取得

Emit  Event Name  : extractMatchIndex
Emit Data Format : 
{
	'sessionID' : string
} 

On Event Name : extractMatchIndex
On Data Format :  
{ 
  'm_id' : int,			// 試合ID
  'matchName' : string,	// 試合名
  'sponsor': string,	// 主催
  'created': string,	// 試合開始日
  'arrows': int,		// 射数
  'perEnd': int,		// セット数
  'length': int,		// 距離
  'players': int		// 参加人数 (得点表の数)
}

試合::作成による更新

On Event Name : broadcastInsertMatch
On Data Format : 
{
	'm_id' : int,			// 試合ID
	'matchName': string,// 試合名
	'sponsor': string,	// 主催
	'arrows': int,		// 射数
	'perEnd': int,		// セット数
	'length': int, 		// 距離
	'players': int		// 参加人数 (得点表の数)
}


試合作成画面

/matchIndexにwebsocketで接続。
試合作成に必要なデータをイベント名 insertMatch でEmitする。
試合作成が成功したら、同じイベント名でその試合に参加するためのm_idが送られてくるので、得点表一覧画面でm_idをjoinMatchでemitする。
また、試合作成画面を表示する前に、イベント checkOrganization でそのユーザーが団体に所属しているかどうかを確認することができる。
falseだった場合はその人は団体に所属していないので、permissionの'所属団体のみ'を無効化し、trueの場合は、permissionの'所属団体のみ'も選ぶことができる

試合::団体所属確認

Emit Event Name : checkOrganization
Emit Data Format : 
{
	'sessionID': string
}

On Event Name : checkOrganization
On Data Format : 
{
	'belongs' : bool
}

試合::作成

Emit Event Name : insertMatch
Emit Data Format :  
{
	'sessionID': string,
	'matchName': string,// 試合名
	'sponsor': string,	// 主催
	'arrows': int,		// 射数
	'perEnd': int,		// セット数
	'length': int 		// 距離
	'permission' : int 	// 試合のアクセス権限(誰がその試合に参加できるか)
}

On Event Name : insertMatch
On Data Format : 
{
	'm_id': int
}


得点表一覧

/scoreCardIndexにwebsocketで接続。
クライアントは初めに参加したい試合のid(m_id)をsessionIDとともにイベント名 joinMatchでEmitし、その試合に参加する。
参加が完了すると、イベント extractScoreCardIndex がクライアント側でonするのでそのイベントで得点表一覧データを取得し表示する。
接続中に新たな試合が作成されたら、broadcastInsertScoreCardイベントがクライアント側でonし、データとしてその追加された試合の情報を受け取る。
得点表を閲覧・編集したい場合は、次のページ(アクティビティ)の/scoreCardでextractScoreCardイベントを得点表のID(sc_id)とsessionIDとともにemitする。
For Android Client : 得点表一覧画面で、各得点表のアクセス権(編集モード or 閲覧モード)を調べるためには、イベント 

試合::参加

Emit Event Name : joinMatch
Emit Data Format : 
{
	'm_id' : int,
	'sessionID' : string
}

得点表::一覧取得

On Event Name : extractScoreCardIndex
On Data Format : 
[
	{ 
		'sc_id', int,		// 得点表ID
		'playerName': string,	// 選手名
		'scoreTotal': int 	// 得点合計
	},
	{ ... },
	{ ... }
]

得点表::作成による更新

On Event Name : broadcastInsertScoreCard
On Data Format : 
{
	'sc_id', int,		// 得点表ID
	'playerName': string,	// 選手名
	'perEnd': int,		// 現在のセット数
	'scoreTotal': int 	// 得点合計
}

得点表::編集モード、閲覧モードのチェック

Emit Event Name : checkPermission
Emit Data Format : 
{
	'sc_id' : int,
	'sessionID' : string
}

On Event Name : checkPermission
On Data Format : 
{
	'permission': bool		// true: 編集可, false: 閲覧のみ
}


得点表作成画面

/scoreCardIndexにwebsocketで接続。
得点表を作成したい選手のsessionID、もしくは、emailとpasswordを送信する。
成功したら、同じイベント名でその得点表のIDが送信されてくる。


現在ログインしているユーザーの得点表作成

Emit Event Name : insertOwnScoreCard
Emit Data Format : 
{ 
	'sessionID': string,
	'm_id': int,		// どの試合で得点表を作成したのか, その試合のID
}

On Event Name : insertOwnScoreCard
On Data Format : 
{
	'sc_id': int
}

得点表作成

Emit Event Name : insertScoreCard
Emit Data Format : 
{ 
	'm_id': int,		// どの試合で得点表を作成したのか, その試合のID
	'email': string,	// ユーザーログイン用のemail
	'password': string	// ユーザーログイン用のpassword
}

On Event Name : insertScoreCard
On Data Format : 
{
	'sc_id': int
}


得点表画面

/scoreCardにwebsocketで接続
extractScoreCardイベントで閲覧・編集したい得点表のid(sc_id)をsessionIDとともに送信する。
成功すると、同じイベント名でその得点表のデータが送られてくる。
得点表のデータを挿入する場合は insertScore, 更新(修正)する場合はupdateScoreイベントで送信。
得点表の閲覧中に他のユーザーによって得点が挿入された場合は broadcastInsertScore、更新(修正)された場合はbroadcastUpdateScoreイベントでそのデータが送られてくる。
得点表の編集モードと閲覧モードの判断は、 extractScoreCardイベントで送られてくるデータの中の permissionを参照する。tureの時は編集可、falseの時は閲覧のみとする。

id:xの得点表の取得

Emit Event Name : extractScoreCard
Emit Data Format : 
{ 
	'sc_id': int ,
	'sessionID': string
}

On Event Name : extractScoreCard
On Data Format :
{
	'sc_id': int,			// 得点表ID
	'playerName': string,	// 選手名
	'organizationName': string, // 団体名
	'matchName': string,	// 大会名
	'created':	string,		// 試合作成日
	'length': int,			// 距離
	'countPerEnd': int, 	// 現在のセット (テーブルに格納されているカラムの数)
	'ten': int,				// 10数
	'x': int, 				// X数
	'sum': int,				// 合計
	'score': [
		{ 
			'score_1': string,			// 1射目の得点
			...,
			'score_6': string,			// 6射目の得点
			'updatedScore_1': string,	// 1射目の修正された得点 (DEFAULT VALUE : null)
			...,
			'updatedScore_6': string,	// 6射目の修正された得点
			'subTotal': int,			// このセットの小計
			'perEnd': int 				// このオブジェクトの得点が属するセット数
		},
		{ ... },
		{ ... }
	],
	'permission': bool		// true: 編集可, false: 閲覧のみ
}

得点::挿入

Emit Event Name : insertScore
Emit Data Format : 
{
	'sc_id': int,		// 得点表のID
	'sessionID': string,
	'perEnd': int,		// 何セット目の得点か
	'score_1': string,	// 1射目の得点
	'score_2': string,	// 2射目の得点
	'score_3': string,	// 3射目の得点
	'score_4': string,	// 4射目の得点
	'score_5': string,	// 5射目の得点
	'score_6': string,	// 6射目の得点
	'subTotal': int 	// そのセットの小計
	'ten': int,			// 全セットの10数
	'x': int,			// 全セットのx数
	'total': int 		// 全セットの合計
}

得点::修正

Emit Event Name : updateScore
Emit Data Format : 
{
	'sc_id': int,				// 得点表のID
	'sessionID': string,
	'perEnd': int,				// 何セット目の得点か
	'updatedScore_x': string,	// x射目の得点 (ただし、xは何射目なのかを表す)
	'subTotal': int 	// そのセットの小計
	'ten': int,			// 全セットの10数
	'x': int,			// 全セットのx数
	'total': int 		// 全セットの合計
}

得点::得点挿入による更新

On Event Name : broadcastInsertScore
On Data Format : 
{
	'sc_id': int,				// 得点表のID
	'perEnd': int,				// 何セット目の得点か
	'score_1': string,	// 1射目の得点
	'score_2': string,	// 2射目の得点
	'score_3': string,	// 3射目の得点
	'score_4': string,	// 4射目の得点
	'score_5': string,	// 5射目の得点
	'score_6': string,	// 6射目の得点
	'subTotal': int 	// そのセットの小計
	'ten': int,			// 全セットの10数
	'x': int,			// 全セットのx数
	'total': int 		// 全セットの合計
}

得点::得点修正による更新

On Event Name : broadcastUpdateScore
On Data Format : 
{
	'sc_id': int,				// 得点表のID
	'perEnd': int,				// 何セット目の得点か
	'updatedScore_x': string,	// x射目の得点 (ただし、xは何射目なのかを表す)
	'subTotal': int 	// そのセットの小計
	'ten': int,			// 全セットの10数
	'x': int,			// 全セットのx数
	'total': int 		// 全セットの合計
}


認証エラー

Websocket通信の際に送信するsessionIDが無効だった場合は、以下のイベントエミットする。
これを受け取ったクライアントはログイン画面へ強制的に遷移させなければならない。

On Event Name : authorizationError
On Data Format : 特になし
